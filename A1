# frailty_analysis.py

import pandas as pd
import numpy as np
import os

def ingest_frailty_data():
    data = {
        "Height_in": [65.8, 71.5, 69.4, 68.2, 67.8, 68.7, 69.8, 70.1, 67.9, 66.8],
        "Weight_lb": [112, 136, 153, 142, 144, 123, 141, 136, 112, 120],
        "Age_yr": [30, 19, 45, 22, 29, 50, 51, 23, 17, 39],
        "Grip_kg": [30, 31, 29, 28, 24, 26, 22, 20, 19, 31],
        "Frailty": ["N", "N", "N", "Y", "Y", "N", "Y", "Y", "N", "N"]
    }
    os.makedirs("data", exist_ok=True)
    df = pd.DataFrame(data)
    df.to_csv("data/frailty_raw.csv", index=False)
    return pd.read_csv("data/frailty_raw.csv")

def process_frailty_data(df):
    df["Height_m"] = df["Height_in"] * 0.0254
    df["Weight_kg"] = df["Weight_lb"] * 0.45359237
    df["BMI"] = (df["Weight_kg"] / df["Height_m"]**2).round(2)

    def age_group(age):
        if age < 30: return "<30"
        elif age <= 45: return "30–45"
        elif age <= 60: return "46–60"
        else: return ">60"

    df["AgeGroup"] = df["Age_yr"].apply(age_group)
    df["Frailty_binary"] = df["Frailty"].map({"Y": 1, "N": 0}).astype("int8")
    df = pd.get_dummies(df, columns=["AgeGroup"], prefix="AgeGroup")
    df.to_csv("data/frailty_processed.csv", index=False)
    return df

def analyze_frailty(df):
    summary = df.describe().loc[["mean", "50%", "std"]]
    summary.rename(index={"50%": "median"}, inplace=True)
    correlation = df["Grip_kg"].corr(df["Frailty_binary"])
    os.makedirs("reports", exist_ok=True)
    with open("reports/findings.md", "w") as f:
        f.write("# Frailty Study Findings\n\n")
        f.write("## Summary Statistics\n")
        f.write(summary.to_markdown())
        f.write("\n\n## Correlation Analysis\n")
        f.write(f"Correlation between Grip Strength and Frailty: **{correlation:.2f}**\n")

# Running frailty workflow
df_frailty = ingest_frailty_data()
df_frailty_processed = process_frailty_data(df_frailty)
analyze_frailty(df_frailty_processed)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

def ingest_student_data():
    url = "https://raw.githubusercontent.com/rashida048/Datasets/master/StudentsPerformance.csv"
    df = pd.read_csv(url)
    return df

def visualize_student_data(df):
    os.makedirs("reports", exist_ok=True)
    report_path = "reports/student_analysis.md"

    with open(report_path, "w") as f:
        f.write("# Student Performance Visualizations\n\n")

        # Visualization 1: Gender boxplots
        plt.figure(figsize=(8, 6), dpi=300)
        sns.boxplot(data=df.melt(id_vars='gender', value_vars=['math score', 'reading score']),
                    x='variable', y='value', hue='gender')
        plt.title("Gender Differences in Math vs Reading Scores")
        plt.xlabel("Subject")
        plt.ylabel("Score")
        plt.legend(title="Gender")
        plt.tight_layout()
        plt.savefig("reports/V1_gender_boxplot.png")
        f.write("## V1: Gender Differences in Math vs Reading\n")
        f.write("![V1](V1_gender_boxplot.png)\n\n")
        f.write("Female students tend to outperform males in reading, with higher medians and tighter score distributions. "
                "Math scores are more evenly distributed across genders, though males show slightly higher upper quartiles. "
                "These patterns suggest that gender differences are more pronounced in reading than in math. "
                "Educational strategies might consider gender-specific support in reading and math. "
                "Overall, reading appears to favor females, while math is more balanced.\n\n")

        # Visualization 2: Test prep impact
        plt.figure(figsize=(8, 6), dpi=300)
        sns.boxplot(data=df, x='test preparation course', y='math score')
        plt.title("Math Scores by Test Preparation Course Completion")
        plt.xlabel("Test Preparation Course")
        plt.ylabel("Math Score")
        plt.tight_layout()
        plt.savefig("reports/V2_testprep_math.png")
        f.write("## V2: Test Preparation Impact on Math Scores\n")
        f.write("![V2](V2_testprep_math.png)\n\n")
        f.write("Students who completed the test preparation course consistently scored higher in math. "
                "The median math score for the 'completed' group is noticeably above that of the 'none' group. "
                "This supports the hypothesis that test preparation positively impacts math achievement. "
                "The difference in score distributions highlights the value of structured academic support.\n\n")

        # Visualization 3: Lunch type and average performance
        df["overall_avg"] = df[["math score", "reading score", "writing score"]].mean(axis=1)
        avg_scores = df.groupby("lunch")["overall_avg"].mean().reset_index()
        plt.figure(figsize=(8, 6), dpi=300)
        sns.barplot(data=avg_scores, x="lunch", y="overall_avg")
        plt.title("Average Performance by Lunch Type")
        plt.xlabel("Lunch Type")
        plt.ylabel("Average Score")
        plt.tight_layout()
        plt.savefig("reports/V3_lunch_avg.png")
        f.write("## V3: Lunch Type and Average Performance\n")
        f.write("![V3](V3_lunch_avg.png)\n\n")
        f.write("Students receiving standard lunch outperform those on free/reduced lunch across all subjects. "
                "The average score difference is substantial, indicating a potential link between socioeconomic status and academic performance. "
                "This disparity may reflect broader resource gaps, such as access to tutoring or stable study environments.\n\n")

        # Visualization 4: Subject correlations
        plt.figure(figsize=(8, 6), dpi=300)
        corr = df[["math score", "reading score", "writing score"]].corr()
        sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f")
        plt.title("Correlation Between Subjects")
        plt.tight_layout()
        plt.savefig("reports/V4_subject_correlation.png")
        f.write("## V4: Subject Correlations\n")
        f.write("![V4](V4_subject_correlation.png)\n\n")
        f.write("The heatmap shows strong positive correlations among all three subjects. "
                "Reading and writing have the highest correlation (~0.95), indicating a close relationship in language skills. "
                "Math also correlates positively with reading and writing (~0.65–0.70), though less strongly. "
                "These results suggest that students who excel in one subject often perform well in others.\n\n")

        # Visualization 5: Math vs Reading with trend lines
        sns.lmplot(data=df, x="reading score", y="math score", hue="test preparation course",
                   height=6, aspect=1.33, markers=["o", "s"], palette="Set1")
        plt.title("Math vs Reading Scores by Test Prep Completion")
        plt.xlabel("Reading Score")
        plt.ylabel("Math Score")
        plt.tight_layout()
        plt.savefig("reports/V5_math_reading_trend.png")
        f.write("## V5: Math vs Reading with Trend Lines by Test Prep\n")
        f.write("![V5](V5_math_reading_trend.png)\n\n")
        f.write("The scatter plot with trend lines reveals a positive association between reading and math scores. "
                "Students who completed the test prep course show a steeper slope, indicating stronger gains in math relative to reading. "
                "This suggests that test prep may enhance math-specific skills more than reading. "
                "The 'none' group has a flatter trend, implying weaker math performance even with high reading scores.\n\n")

# Run the workflow
df_students = ingest_student_data()
visualize_student_data(df_students)
